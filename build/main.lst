ARM GAS  /var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.main.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 48656C6C 		.ascii	"Hello from STM32 AML-BVAT!\015\012\000"
  23      6F206672 
  23      6F6D2053 
  23      544D3332 
  23      20414D4C 
  24 001d 000000   		.align	2
  25              	.LC1:
  26 0020 53746172 		.ascii	"Starting I2C initialization...\015\012\000"
  26      74696E67 
  26      20493243 
  26      20696E69 
  26      7469616C 
  27 0041 000000   		.align	2
  28              	.LC2:
  29 0044 414D4C20 		.ascii	"AML BVAT is ready for mueasrements.\015\012\000"
  29      42564154 
  29      20697320 
  29      72656164 
  29      7920666F 
  30              		.section	.text.main,"ax",%progbits
  31              		.align	1
  32              		.global	main
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  37              	main:
  38              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
ARM GAS  /var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s 			page 2


   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  19:Core/Src/main.c **** #include "main.h"
  20:Core/Src/main.c **** #include "aml_hal.h"
  21:Core/Src/main.c **** #include "gpio_handler.h"
  22:Core/Src/main.c **** #include "uart_handler.h"
  23:Core/Src/main.c **** #include "timer.h"
  24:Core/Src/main.c **** #include "command_handler.h"
  25:Core/Src/main.c **** #include "i2c_handler.h"
  26:Core/Src/main.c **** #include "uart_handler.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  29:Core/Src/main.c **** // UART_HandleTypeDef huart2;
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /**
  32:Core/Src/main.c ****   * @brief  The application entry point.
  33:Core/Src/main.c ****   * @retval int
  34:Core/Src/main.c ****   */
  35:Core/Src/main.c **** int main(void)
  36:Core/Src/main.c **** {
  39              		.loc 1 36 1 view -0
  40              		.cfi_startproc
  41              		@ Volatile: function does not return.
  42              		@ args = 0, pretend = 0, frame = 0
  43              		@ frame_needed = 0, uses_anonymous_args = 0
  44 0000 08B5     		push	{r3, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 3, -8
  48              		.cfi_offset 14, -4
  37:Core/Src/main.c ****   // HAL initialisation
  38:Core/Src/main.c ****   BVAT_Init();
  49              		.loc 1 38 3 view .LVU1
  50 0002 FFF7FEFF 		bl	BVAT_Init
  51              	.LVL0:
  39:Core/Src/main.c ****   BuiltinLED_Init();
  52              		.loc 1 39 3 view .LVU2
  53 0006 FFF7FEFF 		bl	BuiltinLED_Init
  54              	.LVL1:
  40:Core/Src/main.c **** 
  41:Core/Src/main.c ****   HAL_Delay(100);
  55              		.loc 1 41 3 view .LVU3
  56 000a 6420     		movs	r0, #100
  57 000c FFF7FEFF 		bl	HAL_Delay
  58              	.LVL2:
  42:Core/Src/main.c ****   WriteUART_Blocking("Hello from STM32 AML-BVAT!\r\n");
  59              		.loc 1 42 3 view .LVU4
  60 0010 0E48     		ldr	r0, .L4
  61 0012 FFF7FEFF 		bl	WriteUART_Blocking
ARM GAS  /var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s 			page 3


  62              	.LVL3:
  43:Core/Src/main.c **** 
  44:Core/Src/main.c ****   WriteUART ("Starting I2C initialization...\r\n");
  63              		.loc 1 44 3 view .LVU5
  64 0016 0E48     		ldr	r0, .L4+4
  65 0018 FFF7FEFF 		bl	WriteUART
  66              	.LVL4:
  45:Core/Src/main.c **** 
  46:Core/Src/main.c ****   
  47:Core/Src/main.c ****   HAL_Delay(100);
  67              		.loc 1 47 3 view .LVU6
  68 001c 6420     		movs	r0, #100
  69 001e FFF7FEFF 		bl	HAL_Delay
  70              	.LVL5:
  48:Core/Src/main.c ****   BVAT_I2C_Init(); // Initialize I2C peripheral
  71              		.loc 1 48 3 view .LVU7
  72 0022 FFF7FEFF 		bl	BVAT_I2C_Init
  73              	.LVL6:
  49:Core/Src/main.c **** 
  50:Core/Src/main.c ****   // Toggle LED for the first time to inidciate everything set up
  51:Core/Src/main.c ****   indicate_setup_with_blinks(3, 100);
  74              		.loc 1 51 3 view .LVU8
  75 0026 6421     		movs	r1, #100
  76 0028 0320     		movs	r0, #3
  77 002a FFF7FEFF 		bl	indicate_setup_with_blinks
  78              	.LVL7:
  52:Core/Src/main.c **** 
  53:Core/Src/main.c ****   /**
  54:Core/Src/main.c ****    * !TESTER SPACE =============================================================
  55:Core/Src/main.c ****    */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c ****   // --- UART Test: Send a message AFTER blinking and BEFORE the main loop ---
  58:Core/Src/main.c ****   // WriteUART("System Initialized. Blinking complete. UART OK!\r\n");
  59:Core/Src/main.c **** 
  60:Core/Src/main.c ****   // write a UART message to test
  61:Core/Src/main.c ****   // const char message_to_send[] = "Tester message\r\n"; // Added \r\n for new line
  62:Core/Src/main.c ****   // HAL_UART_Transmit_IT(&huart2, (uint8_t *)message_to_send, strlen(message_to_send));
  63:Core/Src/main.c **** 
  64:Core/Src/main.c ****   // WriteUART_Blocking_Test("Blocking UART Test OK!\r\n");
  65:Core/Src/main.c ****   // HAL_Delay(100); // Just to ensure it's not immediately followed by something else
  66:Core/Src/main.c **** 
  67:Core/Src/main.c ****   // You might add a small delay to ensure the message has time to physically transmit,
  68:Core/Src/main.c ****   // especially if the next operations are very fast or if you hit a breakpoint immediately.
  69:Core/Src/main.c ****   HAL_Delay(100); // e.g., 100ms delay
  79              		.loc 1 69 3 view .LVU9
  80 002e 6420     		movs	r0, #100
  81 0030 FFF7FEFF 		bl	HAL_Delay
  82              	.LVL8:
  70:Core/Src/main.c **** 
  71:Core/Src/main.c ****   // uint8_t uart_test_message[] = "Hello from STM32 AML-BVAT Initialised!\r\n";
  72:Core/Src/main.c ****   HAL_StatusTypeDef uart_tx_status;
  83              		.loc 1 72 3 view .LVU10
  73:Core/Src/main.c **** 
  74:Core/Src/main.c ****   // // Transmit the message using HAL_UART_Transmit (blocking mode)
  75:Core/Src/main.c ****   // // Make sure huart2 has been initialized by MX_USART2_UART_Init() before this line.
  76:Core/Src/main.c ****   // uart_tx_status = HAL_UART_Transmit(&huart2,        // Pointer to your UART handle
  77:Core/Src/main.c ****   //                                    uart_test_message,  // Pointer to data buffer
ARM GAS  /var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s 			page 4


  78:Core/Src/main.c ****   //                                    strlen((char*)uart_test_message), // Length of data
  79:Core/Src/main.c ****   //                                    1000);            // Timeout in milliseconds (e.g., 1000ms)
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   // // Optional: Check the status of the transmission
  82:Core/Src/main.c ****   // if (uart_tx_status == HAL_OK)
  83:Core/Src/main.c ****   // {
  84:Core/Src/main.c ****   //   // Transmission was successful!
  85:Core/Src/main.c ****   //   // You could toggle an LED here differently to confirm, or just rely on seeing it in picocom
  86:Core/Src/main.c ****   // }
  87:Core/Src/main.c ****   // else
  88:Core/Src/main.c ****   // {
  89:Core/Src/main.c ****   //   // Transmission failed (e.g., HAL_ERROR, HAL_TIMEOUT, HAL_BUSY)
  90:Core/Src/main.c ****   //   // The program will likely go into Error_Handler() if HAL_UART_Init failed earlier,
  91:Core/Src/main.c ****   //   // or if there's a hardware fault during transmit.
  92:Core/Src/main.c ****   //   // If HAL_UART_Init was OK but this fails, it's a more specific transmit issue.
  93:Core/Src/main.c ****   //   // For now, if this fails, check your Error_Handler for clues.
  94:Core/Src/main.c ****   //   // You could add a specific error indication here if Error_Handler isn't hit.
  95:Core/Src/main.c ****   //   Error_Handler(); // Or a specific error routine for UART TX fail
  96:Core/Src/main.c ****   // }
  97:Core/Src/main.c ****   HAL_Delay(10);
  84              		.loc 1 97 3 view .LVU11
  85 0034 0A20     		movs	r0, #10
  86 0036 FFF7FEFF 		bl	HAL_Delay
  87              	.LVL9:
  98:Core/Src/main.c ****   WriteUART_Blocking("AML BVAT is ready for mueasrements.\r\n");
  88              		.loc 1 98 3 view .LVU12
  89 003a 0648     		ldr	r0, .L4+8
  90 003c FFF7FEFF 		bl	WriteUART_Blocking
  91              	.LVL10:
  92              	.L2:
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   //! TESTER SPACE END =========================================================
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   while (1) {
  93              		.loc 1 102 3 view .LVU13
 103:Core/Src/main.c ****     // measure_loop(); // Main measurement loop
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****     indicate_setup_with_blinks(3, 100);
  94              		.loc 1 105 5 discriminator 1 view .LVU14
  95 0040 6421     		movs	r1, #100
  96 0042 0320     		movs	r0, #3
  97 0044 FFF7FEFF 		bl	indicate_setup_with_blinks
  98              	.LVL11:
 102:Core/Src/main.c ****     // measure_loop(); // Main measurement loop
  99              		.loc 1 102 9 view .LVU15
 100 0048 FAE7     		b	.L2
 101              	.L5:
 102 004a 00BF     		.align	2
 103              	.L4:
 104 004c 00000000 		.word	.LC0
 105 0050 20000000 		.word	.LC1
 106 0054 44000000 		.word	.LC2
 107              		.cfi_endproc
 108              	.LFE137:
 110              		.text
 111              	.Letext0:
 112              		.file 2 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
ARM GAS  /var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s 			page 5


 113              		.file 3 "/Applications/ArmGNUToolchain/13.3.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 114              		.file 4 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 115              		.file 5 "Core/Src/gpio_handler/gpio_handler.h"
 116              		.file 6 "Core/Src/uart_handler/uart_handler.h"
 117              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 118              		.file 8 "Core/Src/i2c_handler/i2c_handler.h"
 119              		.file 9 "Core/Src/command_handler/command_handler.h"
 120              		.file 10 "Core/Src/library/aml_hal.h"
ARM GAS  /var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s:21     .rodata.main.str1.4:00000000 $d
/var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s:31     .text.main:00000000 $t
/var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s:37     .text.main:00000000 main
/var/folders/25/vg8ydb454_z3v37m53jqj5280000gn/T//ccVELjPr.s:104    .text.main:0000004c $d

UNDEFINED SYMBOLS
BVAT_Init
BuiltinLED_Init
HAL_Delay
WriteUART_Blocking
WriteUART
BVAT_I2C_Init
indicate_setup_with_blinks
